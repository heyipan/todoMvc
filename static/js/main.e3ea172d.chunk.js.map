{"version":3,"sources":["component/TodoItem.js","component/TodoFooter.js","component/AddTodo.js","component/TodoMain.js","App.js","reducer/index.js","serviceWorker.js","index.js"],"names":["TodoItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCheck","check","id","handleRemove","remove","startEdit","setState","isView","handleEdit","e","value","target","handleSubmit","preventDefault","state","edit","text","_this$props","status","react_default","a","createElement","defineProperty","className","type","checked","onChange","onDoubleClick","onClick","onSubmit","onBlur","React","Component","connect","dispatch","TodoFooter","handleClearCompleted","clearCompleted","handleChoose","choose","dataset","condition","selected","num","todoList","map","item","completed","push","length","href","data-condition","AddTodo","InputValue","add","placeholder","autoFocus","App","handleToggle","toggleALL","toggle","component_AddTodo","htmlFor","component_TodoItem","key","component_TodoFooter","store","createStore","action","copyTodos","data","Date","concat","toConsumableArray","objectSpread","newArry","todoItem","filter","arr","es","TodoMain","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAEMA,cACF,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,YAAa,WACTP,EAAKD,MAAMS,MAAMR,EAAKD,MAAMU,KARdT,EAUlBU,aAAe,WACXV,EAAKD,MAAMY,OAAOX,EAAKD,MAAMU,KAXfT,EAalBY,UAAY,WACRZ,EAAKa,SAAS,CACVC,QAAO,KAfGd,EAkBlBe,WAAa,SAACC,GACVhB,EAAKa,SAAS,CACVI,MAAMD,EAAEE,OAAOD,SApBLjB,EAuBlBmB,aAAe,SAACH,GACZA,EAAEI,iBACCpB,EAAKqB,MAAMJ,OACVjB,EAAKD,MAAMuB,KAAKtB,EAAKqB,MAAMJ,MAAMjB,EAAKD,MAAMU,IAEhDT,EAAKa,SAAS,CACVC,QAAO,KA3BXd,EAAKqB,MAAO,CACRP,QAAO,EACPG,MAAMlB,EAAMwB,MAJFvB,wEAgCV,IAAAwB,EACkBrB,KAAKJ,MAApB0B,EADHD,EACGC,OAAOF,EADVC,EACUD,KACd,OACIG,EAAAC,EAAAC,cAAA,KAAA3B,OAAA4B,EAAA,EAAA5B,CAAA,CAAI6B,UAAWL,EAAO,YAAY,IAAlC,YAAiDtB,KAAKkB,MAAMP,OAAO,GAAG,WAClEY,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACXJ,EAAAC,EAAAC,cAAA,SAAOE,UAAU,SAASC,KAAK,WAAWC,QAASP,EAAQQ,SAAU9B,KAAKI,cAC1EmB,EAAAC,EAAAC,cAAA,SAAOM,cAAe/B,KAAKS,WAAYW,GACvCG,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAAUK,QAAShC,KAAKO,gBAE9CgB,EAAAC,EAAAC,cAAA,QAAMQ,SAAUjC,KAAKgB,cACjBO,EAAAC,EAAAC,cAAA,SAAOE,UAAU,OAAOb,MAAOd,KAAKkB,MAAMJ,MAAOoB,OAAQlC,KAAKgB,aAAec,SAAU9B,KAAKY,sBA3CxFuB,IAAMC,WA+DfC,cAAQ,KAbI,SAACC,GACxB,MAAO,CACHjC,MAAM,SAACC,GACHgC,EAAS,CAACV,KAAK,QAAQtB,GAAGA,KAE9BE,OAAO,SAACF,GACJgC,EAAS,CAACV,KAAK,SAAStB,GAAGA,KAE/Ba,KAAK,SAACC,EAAKd,GACPgC,EAAS,CAACV,KAAK,OAAOR,KAAKA,EAAKd,GAAGA,OAIhC+B,CAAiC1C,GC/D1C4C,cACF,SAAAA,EAAY3C,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuC,IACd1C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyC,GAAApC,KAAAH,KAAMJ,KAKV4C,qBAAuB,WACnB3C,EAAKD,MAAM6C,kBAPG5C,EASlB6C,aAAc,SAAC7B,GACXhB,EAAKD,MAAM+C,OAAO9B,EAAEE,OAAO6B,QAAQC,WACnChD,EAAKa,SAAS,CACVoC,SAASjC,EAAEE,OAAO6B,QAAQC,aAV9BhD,EAAKqB,MAAO,CACR4B,SAAS,OAHCjD,wEAgBd,IAAMkD,EAAM,GAMZ,OALA/C,KAAKJ,MAAMoD,SAASC,IAAI,SAACC,GAChBA,EAAKC,WACRJ,EAAIK,KAAKF,KAIZ3B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAME,UAAU,cAAaJ,EAAAC,EAAAC,cAAA,cAASsB,EAAIM,QAA1C,cACA9B,EAAAC,EAAAC,cAAA,MAAIE,UAAU,WACVJ,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGE,UAAiC,QAAtB3B,KAAKkB,MAAM4B,SAAiB,WAAW,GAAIQ,KAAK,IAAIC,iBAAe,MAAMvB,QAAShC,KAAK0C,cAArG,QAEJnB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGE,UAAiC,WAAtB3B,KAAKkB,MAAM4B,SAAoB,WAAW,GAAIQ,KAAK,WAAWC,iBAAe,SAASvB,QAAShC,KAAK0C,cAAlH,WAEJnB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGE,UAAiC,cAAtB3B,KAAKkB,MAAM4B,SAAuB,WAAW,GAAIQ,KAAK,cAAcC,iBAAe,YAAYvB,QAAShC,KAAK0C,cAA3H,eAGRnB,EAAAC,EAAAC,cAAA,UAAQE,UAAU,kBAAkBK,QAAShC,KAAKwC,sBAAlD,2BArCWL,IAAMC,WAyDjBC,cAfS,SAACnB,GACrB,MAAO,CACH8B,SAAS9B,EAAM8B,WAGI,SAACV,GACxB,MAAO,CACHG,eAAe,WACXH,EAAS,CAACV,KAAK,qBAEnBe,OAAO,SAACE,GACJP,EAAS,CAACV,KAAK,SAAUiB,UAAUA,OAIhCR,CAA4CE,GCxDrDiB,cACF,SAAAA,EAAY5D,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwD,IACd3D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0D,GAAArD,KAAAH,KAAMJ,KAKV6D,WAAa,SAAC5C,GACVhB,EAAKa,SAAS,CACVI,MAAMD,EAAEE,OAAOD,SARLjB,EAWlBmB,aAAe,SAACH,GACZA,EAAEI,iBACFpB,EAAKD,MAAM8D,IAAI7D,EAAKqB,MAAMJ,OAC1BjB,EAAKa,SAAS,CACVI,MAAM,MAbVjB,EAAKqB,MAAO,CACRJ,MAAM,IAHIjB,wEAmBd,OACI0B,EAAAC,EAAAC,cAAA,QAAMQ,SAAUjC,KAAKgB,cACjBO,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UACdJ,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,SAAOE,UAAU,WAAWb,MAAOd,KAAKkB,MAAMJ,MAAO6C,YAAY,yBAAyB7B,SAAU9B,KAAKyD,WAAYG,WAAS,aAxB3HzB,IAAMC,WAqCdC,cAAQ,KAPI,SAACC,GACxB,MAAO,CACHoB,IAAI,SAACtC,GACDkB,EAAS,CAACV,KAAK,MAAMR,KAAKA,OAIvBiB,CAAiCmB,GChC1CK,cACF,SAAAA,EAAYjE,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6D,IACdhE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+D,GAAA1D,KAAAH,KAAMJ,KAKVkE,aAAc,WACV,IAAMxC,EAASzB,EAAKqB,MAAMI,OAC1BzB,EAAKa,SAAS,CACVY,QAAQA,KATEzB,EAYlBkE,UAAa,WACTlE,EAAKD,MAAMoE,OAAOnE,EAAKqB,MAAMI,SAX7BzB,EAAKqB,MAAM,CACPI,QAAO,GAHGzB,wEAeT,IACEmD,EAAYhD,KAAKJ,MAAjBoD,SACP,OACIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAA,WAASE,UAAU,WACfJ,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAAA,WAASE,UAAU,QACfJ,EAAAC,EAAAC,cAAA,SAAOnB,GAAG,aAAaqB,UAAU,aAAaC,KAAK,WAAWE,SAAU9B,KAAK8D,aAAcjC,QAAS7B,KAAKkB,MAAMI,SAC/GC,EAAAC,EAAAC,cAAA,SAAOyC,QAAQ,aAAalC,QAAShC,KAAK+D,YAC1CxC,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAENqB,EAASC,IAAI,SAACC,GACV,OAAO3B,EAAAC,EAAAC,cAAC0C,EAAD,CAAWC,IAAKlB,EAAK5C,GAAIc,KAAM8B,EAAK9B,KAAME,OAAQ4B,EAAKC,UAAW7C,GAAI4C,EAAK5C,SAMlGiB,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UACdJ,EAAAC,EAAAC,cAAC4C,EAAD,gBAnCNlC,IAAMC,WAwDTC,cAZS,SAACnB,GACrB,MAAO,CACH8B,SAAS9B,EAAM8B,WAGI,SAACV,GACxB,MAAO,CACH0B,OAAO,SAAC1C,GACJgB,EAAS,CAACV,KAAK,SAASN,OAAOA,OAI5Be,CAA4CwB,0BC1DrDS,EAAQC,YCNC,SAAUrD,EAAMsD,GAG3B,IAAKtD,EACD,MAAO,CACH8B,SAAU,CAAC,CACP1C,GAAI,EACJc,KAAM,QACN+B,WAAW,GACZ,CACC7C,GAAI,EACJc,KAAM,SACN+B,WAAW,GACZ,CACC7C,GAAI,EACJc,KAAM,QACN+B,WAAW,IAEfsB,UAAW,CAAC,CACRnE,GAAI,EACJc,KAAM,QACN+B,WAAW,GACZ,CACC7C,GAAI,EACJc,KAAM,SACN+B,WAAW,GACZ,CACC7C,GAAI,EACJc,KAAM,QACN+B,WAAW,KAIvB,OAAOqB,EAAO5C,MACV,IAAK,MACD,IAKM8C,EAAI,CALG,CACTpE,IAAI,IAAIqE,KACRvD,KAAKoD,EAAOpD,KACZ+B,WAAU,IAEJyB,OAAA9E,OAAA+E,EAAA,EAAA/E,CAAYoB,EAAM8B,WAC5B,OAAOlD,OAAAgF,EAAA,EAAAhF,CAAA,GACAoB,EADP,CAEI8B,SAAS0B,EACTD,UAAUC,IAGlB,IAAK,QACD,IAAMK,EAAU7D,EAAM8B,SAASC,IAAI,SAAC+B,GAChC,OAAIA,EAAS1E,KAAOkE,EAAOlE,GAChBR,OAAAgF,EAAA,EAAAhF,CAAA,GACAkF,EADP,CAEI7B,WAAY6B,EAAS7B,YAGlB6B,IAGf,OAAOlF,OAAAgF,EAAA,EAAAhF,CAAA,GACAoB,EADP,CAEI8B,SAAS+B,EACTN,UAAUM,IAGlB,IAAK,SACD,IAAML,EAAOxD,EAAM8B,SAASiC,OAAO,SAAU/B,GACzC,OAAOA,EAAK5C,KAAOkE,EAAOlE,KAE9B,OAAOR,OAAAgF,EAAA,EAAAhF,CAAA,GACAoB,EADP,CAEI8B,SAAS0B,EACTD,UAAUC,IAGlB,IAAK,kBACD,IAAMQ,EAAMhE,EAAM8B,SAASiC,OAAO,SAAC/B,GAC/B,OAA0B,IAAnBA,EAAKC,YAEhB,OAAOrD,OAAAgF,EAAA,EAAAhF,CAAA,GACAoB,EADP,CAEI8B,SAASkC,EACTT,UAAUS,IAGlB,IAAK,SACD,IAAMR,EAAMxD,EAAM8B,SAASC,IAAI,SAACC,GAC5B,OAAOpD,OAAAgF,EAAA,EAAAhF,CAAA,GAAIoD,EAAX,CAAgBC,UAAUqB,EAAOlD,WAErC,OAAOxB,OAAAgF,EAAA,EAAAhF,CAAA,GACAoB,EADP,CAEI8B,SAAS0B,EACTD,UAAUC,IAGlB,IAAK,SACD,IAAMQ,EAAMhE,EAAMuD,UAAUQ,OAAO,SAAC/B,GAChC,MAAyB,WAArBsB,EAAO3B,WACmB,IAAnBK,EAAKC,UACgB,cAArBqB,EAAO3B,WACY,IAAnBK,EAAKC,UAELD,IAGf,OAAOpD,OAAAgF,EAAA,EAAAhF,CAAA,GACAoB,EADP,CAEI8B,SAASkC,IAGjB,IAAK,OACD,IAAMA,EAAMhE,EAAM8B,SAASiC,OAAO,SAAC/B,GAC/B,OAAIA,EAAK5C,KAAOkE,EAAOlE,IACnB4C,EAAK9B,KAAOoD,EAAOpD,KACZ8B,GAEJA,IAEX,OAAOpD,OAAAgF,EAAA,EAAAhF,CAAA,GACAoB,EADP,CAEI8B,SAASkC,EACTT,UAAUS,IAGlB,QACI,OAAOhE,KD3GJ2C,mLART,OACItC,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAUb,MAAOA,GACb/C,EAAAC,EAAAC,cAAC2D,EAAD,cAJKjD,IAAMC,WEKLiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e3ea172d.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nclass TodoItem extends  React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            isView:true,\r\n            value:props.text\r\n        }\r\n    }\r\n    handleCheck =() => {\r\n        this.props.check(this.props.id);\r\n    }\r\n    handleRemove = () => {\r\n        this.props.remove(this.props.id);\r\n    }\r\n    startEdit = () => {\r\n        this.setState({\r\n            isView:false\r\n        })\r\n    }\r\n    handleEdit = (e) => {\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(this.state.value){\r\n            this.props.edit(this.state.value,this.props.id);\r\n        }\r\n        this.setState({\r\n            isView:true\r\n        })\r\n    }\r\n    render(){\r\n        const {status,text} = this.props;\r\n        return (\r\n            <li className={status?'completed':''} className={this.state.isView?\"\":\"editing\"}>\r\n                <div className=\"view\">\r\n                    <input className=\"toggle\" type=\"checkbox\" checked={status} onChange={this.handleCheck}/>\r\n                    <label onDoubleClick={this.startEdit}>{text}</label>\r\n                    <button className=\"destroy\" onClick={this.handleRemove}></button>\r\n                </div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input className=\"edit\" value={this.state.value} onBlur={this.handleSubmit}  onChange={this.handleEdit}/>\r\n                </form>\r\n\r\n            </li>\r\n        )\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        check:(id) => {\r\n            dispatch({type:'CHECK',id:id})\r\n        },\r\n        remove:(id) => {\r\n            dispatch({type:\"REMOVE\",id:id})\r\n        },\r\n        edit:(text,id) => {\r\n            dispatch({type:\"EDIT\",text:text,id:id})\r\n        }\r\n    }\r\n}\r\nexport default connect(null,mapDispatchToProps)(TodoItem);\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nclass TodoFooter extends  React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            selected:'All'\r\n        }\r\n    }\r\n    handleClearCompleted = () => {\r\n        this.props.clearCompleted()\r\n    }\r\n    handleChoose =(e) => {\r\n        this.props.choose(e.target.dataset.condition)\r\n        this.setState({\r\n            selected:e.target.dataset.condition\r\n        })\r\n    }\r\n    render(){\r\n        const num = [];\r\n        this.props.todoList.map((item) => {\r\n            if (!item.completed) {\r\n              num.push(item)\r\n            }\r\n        })\r\n        return (\r\n           <div>\r\n               <span className=\"todo-count\"><strong>{num.length}</strong>itmes left</span>\r\n               <ul className=\"filters\">\r\n                   <li>\r\n                       <a className={this.state.selected==='All'?'selected':''} href=\"#\" data-condition=\"All\" onClick={this.handleChoose}>All</a>\r\n                   </li>\r\n                   <li>\r\n                       <a className={this.state.selected==='Active'?'selected':''} href=\"#/Active\" data-condition=\"Active\" onClick={this.handleChoose}>Active</a>\r\n                   </li>\r\n                   <li>\r\n                       <a className={this.state.selected==='Completed'?'selected':''} href=\"#/Completed\" data-condition=\"Completed\" onClick={this.handleChoose} >Completed</a>\r\n                   </li>\r\n               </ul>\r\n               <button className=\"clear-completed\" onClick={this.handleClearCompleted}>Clear completed</button>\r\n           </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        todoList:state.todoList\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        clearCompleted:() => {\r\n            dispatch({type:'CLEAR_COMPLETED'})\r\n        },\r\n        choose:(condition) => {\r\n            dispatch({type:\"CHOOSE\", condition:condition })\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TodoFooter);\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nclass AddTodo extends  React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            value:''\r\n        }\r\n    }\r\n    InputValue = (e) => {\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.add(this.state.value);\r\n        this.setState({\r\n            value:''\r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <header className=\"header\">\r\n                    <h1>todos</h1>\r\n                    <input className=\"new-todo\" value={this.state.value} placeholder=\"What needs to be done?\" onChange={this.InputValue} autoFocus/>\r\n                </header>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        add:(text) => {\r\n            dispatch({type:'ADD',text:text})\r\n        }\r\n    }\r\n}\r\nexport default connect(null,mapDispatchToProps)(AddTodo);\r\n","import React from 'react';\r\nimport 'todomvc-common/base.css'\r\nimport 'todomvc-app-css/index.css'\r\nimport {connect} from \"react-redux\";\r\nimport TodoItem from './TodoItem'\r\nimport TodoFooter from './TodoFooter'\r\nimport AddTodo from './AddTodo'\r\n\r\nclass App extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            status:false\r\n        }\r\n    }\r\n    handleToggle= () => {\r\n        const status = this.state.status\r\n        this.setState({\r\n            status:!status\r\n        })\r\n    }\r\n    toggleALL =  () => {\r\n        this.props.toggle(this.state.status);\r\n    }\r\n    render() {\r\n        const {todoList} = this.props\r\n        return (\r\n            <div className=\"App\">\r\n                <section className=\"todoapp\">\r\n                    <AddTodo/>\r\n                    <section className=\"main\">\r\n                        <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" onChange={this.handleToggle} checked={this.state.status}/>\r\n                        <label htmlFor=\"toggle-all\" onClick={this.toggleALL}></label>\r\n                        <ul className=\"todo-list\">\r\n                            {\r\n                                todoList.map((item)=>{\r\n                                    return <TodoItem  key={item.id} text={item.text} status={item.completed} id={item.id}/>\r\n                                })\r\n                            }\r\n\r\n                        </ul>\r\n                    </section>\r\n                    <footer className=\"footer\">\r\n                        <TodoFooter/>\r\n                    </footer>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        todoList:state.todoList\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggle:(status) => {\r\n            dispatch({type:\"TOGGLE\",status:status})\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n\r\n","import React from 'react';\nimport TodoMain from './component/TodoMain';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux';\nimport  reducer from './reducer/index'\n\nconst store = createStore(reducer);\nclass  App extends React.Component{\n  render() {\n      return (\n          <Provider store={store}>\n              <TodoMain/>\n          </Provider>\n\n    );\n  }\n}\nexport default App;\n","export default function (state,action) {\r\n    /*初始化 state*/\r\n\r\n    if (!state) {\r\n        return {\r\n            todoList: [{\r\n                id: 0,\r\n                text: 'First',\r\n                completed: true\r\n            }, {\r\n                id: 1,\r\n                text: 'Second',\r\n                completed: false\r\n            }, {\r\n                id: 2,\r\n                text: 'Third',\r\n                completed: true\r\n            }],\r\n            copyTodos: [{\r\n                id: 0,\r\n                text: 'First',\r\n                completed: true\r\n            }, {\r\n                id: 1,\r\n                text: 'Second',\r\n                completed: false\r\n            }, {\r\n                id: 2,\r\n                text: 'Third',\r\n                completed: true\r\n            }],\r\n        }\r\n    }\r\n    switch(action.type){\r\n        case 'ADD': {\r\n            const text = {\r\n                id:+new Date(),\r\n                text:action.text,\r\n                completed:false\r\n            }\r\n            const data = [text,...state.todoList];\r\n            return {\r\n                ...state,\r\n                todoList:data,\r\n                copyTodos:data\r\n            }\r\n        }\r\n        case 'CHECK':{\r\n            const newArry = state.todoList.map((todoItem) => {\r\n                if (todoItem.id === action.id) {\r\n                    return {\r\n                        ...todoItem,\r\n                        completed: !todoItem.completed\r\n                    }\r\n                } else {\r\n                    return todoItem;\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                todoList:newArry,\r\n                copyTodos:newArry\r\n            }\r\n        }\r\n        case 'REMOVE':{\r\n            const data = state.todoList.filter(function (item) {\r\n                return item.id !== action.id\r\n            })\r\n            return {\r\n                ...state,\r\n                todoList:data,\r\n                copyTodos:data\r\n            }\r\n        }\r\n        case 'CLEAR_COMPLETED':{\r\n            const arr = state.todoList.filter((item) => {\r\n                return item.completed !== true;\r\n            })\r\n            return {\r\n                ...state,\r\n                todoList:arr,\r\n                copyTodos:arr\r\n            }\r\n        }\r\n        case \"TOGGLE\":{\r\n            const data= state.todoList.map((item) => {\r\n                return {...item,completed:action.status}\r\n            });\r\n            return {\r\n                ...state,\r\n                todoList:data,\r\n                copyTodos:data\r\n            }\r\n        }\r\n        case \"CHOOSE\" :{\r\n            const arr = state.copyTodos.filter((item) => {\r\n                if (action.condition === 'Active') {\r\n                    return item.completed === false;\r\n                } else if (action.condition === 'Completed') {\r\n                    return item.completed === true;\r\n                }else {\r\n                    return item;\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                todoList:arr,\r\n            }\r\n        }\r\n        case 'EDIT':{\r\n            const arr = state.todoList.filter((item) =>{\r\n                if (item.id === action.id) {\r\n                    item.text = action.text;\r\n                    return item;\r\n                }\r\n                return item;\r\n            });\r\n            return {\r\n                ...state,\r\n                todoList:arr,\r\n                copyTodos:arr\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}